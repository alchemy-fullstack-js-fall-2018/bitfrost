{"version":3,"sources":["../../src/resolvers/Mutation.js"],"names":["bcrypt","require","jwt","randomBytes","promisify","transport","makeANiceEmail","hasPermission","stripe","Mutations","createItem","parent","args","ctx","info","request","userId","Error","db","mutation","data","user","connect","id","item","console","log","updateItem","updates","where","deleteItem","query","ownsItem","hasPermissions","permissions","some","permission","includes","signup","email","toLowerCase","hash","password","createUser","set","token","sign","process","env","APP_SECRET","response","cookie","httpOnly","maxAge","signin","compare","valid","signout","clearCookie","message","requestReset","randomBytesPromiseified","resetToken","toString","resetTokenExpiry","Date","now","updateUser","res","sendMail","from","to","subject","html","FRONTEND_URL","mailRes","resetPassword","confirmPassword","users","resetTokenExpiry_gte","updatedUser","updatePermissions","currentUser","addToCart","cartItems","existingCartItem","updateCartItem","quantity","createCartItem","removeFromCart","cartItem","deleteCartItem","createOrder","amount","cart","reduce","tally","price","charges","create","currency","source","charge","orderItems","map","orderItem","total","items","order","cartItemIds","deleteManyCartItems","id_in","module","exports"],"mappings":"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","sourcesContent":["const bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { randomBytes } = require('crypto');\nconst { promisify } = require('util');\nconst { transport, makeANiceEmail } = require('../mail');\nconst { hasPermission } = require('../utils');\nconst stripe = require('../stripe');\n\n\nconst Mutations = {\n  async createItem(parent, args, ctx, info) {\n    if (!ctx.request.userId) {\n      throw new Error('You must be logged in to do that!');\n    }\n\n    const item = await ctx.db.mutation.createItem(\n      {\n        data: {\n          // This is how to create a relationship between the Item and the User\n          user: {\n            connect: {\n              id: ctx.request.userId,\n            },\n          },\n          ...args,\n        },\n      },\n      info\n    );\n\n    console.log(item);\n\n    return item;\n  },\n  updateItem(parent, args, ctx, info) {\n    // first take a copy of the updates\n    const updates = { ...args };\n    // remove the ID from the updates\n    delete updates.id;\n    // run the update method\n    return ctx.db.mutation.updateItem(\n      {\n        data: updates,\n        where: {\n          id: args.id,\n        },\n      },\n      info\n    );\n  },\n  async deleteItem(parent, args, ctx, info) {\n    const where = { id: args.id };\n    // 1. find the item\n    const item = await ctx.db.query.item({ where }, `{ id title user { id }}`);\n    // 2. Check if they own that item, or have the permissions\n    const ownsItem = item.user.id === ctx.request.userId;\n    const hasPermissions = ctx.request.user.permissions.some(permission =>\n      ['ADMIN', 'ITEMDELETE'].includes(permission)\n    );\n\n    if (!ownsItem && !hasPermissions) {\n      throw new Error(\"You don't have permission to do that!\");\n    }\n\n    // 3. Delete it!\n    return ctx.db.mutation.deleteItem({ where }, info);\n  },\n  async signup(parent, args, ctx, info) {\n    // lowercase their email\n    args.email = args.email.toLowerCase();\n    // hash their password\n    const password = await bcrypt.hash(args.password, 10);\n    // create the user in the database\n    const user = await ctx.db.mutation.createUser(\n      {\n        data: {\n          ...args,\n          password,\n          permissions: { set: ['USER'] },\n        },\n      },\n      info\n    );\n    // create the JWT token for them\n    const token = jwt.sign({ userId: user.id }, process.env.APP_SECRET);\n    // We set the jwt as a cookie on the response\n    ctx.response.cookie('token', token, {\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 365, // 1 year cookie\n    });\n    // Finalllllly we return the user to the browser\n    return user;\n  },\n  async signin(parent, { email, password }, ctx, info) {\n    // 1. check if there is a user with that email\n    const user = await ctx.db.query.user({ where: { email } });\n    if (!user) {\n      throw new Error(`No such user found for email ${email}`);\n    }\n    // 2. Check if their password is correct\n    const valid = await bcrypt.compare(password, user.password);\n    if (!valid) {\n      throw new Error('Invalid Password!');\n    }\n    // 3. generate the JWT Token\n    const token = jwt.sign({ userId: user.id }, process.env.APP_SECRET);\n    // 4. Set the cookie with the token\n    ctx.response.cookie('token', token, {\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 365,\n    });\n    // 5. Return the user\n    return user;\n  },\n  signout(parent, args, ctx, info) {\n    ctx.response.clearCookie('token');\n    return { message: 'Goodbye!' };\n  },\n  async requestReset(parent, args, ctx, info) {\n    // 1. Check if this is a real user\n    const user = await ctx.db.query.user({ where: { email: args.email } });\n    if (!user) {\n      throw new Error(`No such user found for email ${args.email}`);\n    }\n    // 2. Set a reset token and expiry on that user\n    const randomBytesPromiseified = promisify(randomBytes);\n    const resetToken = (await randomBytesPromiseified(20)).toString('hex');\n    const resetTokenExpiry = Date.now() + 3600000; // 1 hour from now\n    const res = await ctx.db.mutation.updateUser({\n      where: { email: args.email },\n      data: { resetToken, resetTokenExpiry },\n    });\n    // 3. Email them that reset token\n    const mailRes = await transport.sendMail({\n      from: 'wes@wesbos.com',\n      to: user.email,\n      subject: 'Your Password Reset Token',\n      html: makeANiceEmail(`Your Password Reset Token is here!\n      \\n\\n\n      <a href=\"${process.env\n        .FRONTEND_URL}/reset?resetToken=${resetToken}\">Click Here to Reset</a>`),\n    });\n\n    // 4. Return the message\n    return { message: 'Thanks!' };\n  },\n  async resetPassword(parent, args, ctx, info) {\n    // 1. check if the passwords match\n    if (args.password !== args.confirmPassword) {\n      throw new Error(\"Yo Passwords don't match!\");\n    }\n    // 2. check if its a legit reset token\n    // 3. Check if its expired\n    const [user] = await ctx.db.query.users({\n      where: {\n        resetToken: args.resetToken,\n        resetTokenExpiry_gte: Date.now() - 3600000,\n      },\n    });\n    if (!user) {\n      throw new Error('This token is either invalid or expired!');\n    }\n    // 4. Hash their new password\n    const password = await bcrypt.hash(args.password, 10);\n    // 5. Save the new password to the user and remove old resetToken fields\n    const updatedUser = await ctx.db.mutation.updateUser({\n      where: { email: user.email },\n      data: {\n        password,\n        resetToken: null,\n        resetTokenExpiry: null,\n      },\n    });\n    // 6. Generate JWT\n    const token = jwt.sign({ userId: updatedUser.id }, process.env.APP_SECRET);\n    // 7. Set the JWT cookie\n    ctx.response.cookie('token', token, {\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 365,\n    });\n    // 8. return the new user\n    return updatedUser;\n  },\n  async updatePermissions(parent, args, ctx, info) {\n    // 1. Check if they are logged in\n    if (!ctx.request.userId) {\n      throw new Error('You must be logged in!');\n    }\n    // 2. Query the current user\n    const currentUser = await ctx.db.query.user(\n      {\n        where: {\n          id: ctx.request.userId,\n        },\n      },\n      info\n    );\n    // 3. Check if they have permissions to do this\n    hasPermission(currentUser, ['ADMIN', 'PERMISSIONUPDATE']);\n    // 4. Update the permissions\n    return ctx.db.mutation.updateUser(\n      {\n        data: {\n          permissions: {\n            set: args.permissions,\n          },\n        },\n        where: {\n          id: args.userId,\n        },\n      },\n      info\n    );\n  },\n  async addToCart(parent, args, ctx, info) {\n    // 1. Make sure they are signed in\n    const { userId } = ctx.request;\n    if (!userId) {\n      throw new Error('You must be signed in soooon');\n    }\n    // 2. Query the users current cart\n    const [existingCartItem] = await ctx.db.query.cartItems({\n      where: {\n        user: { id: userId },\n        item: { id: args.id },\n      },\n    });\n    // 3. Check if that item is already in their cart and increment by 1 if it is\n    if (existingCartItem) {\n      console.log('This item is already in their cart');\n      return ctx.db.mutation.updateCartItem(\n        {\n          where: { id: existingCartItem.id },\n          data: { quantity: existingCartItem.quantity + 1 },\n        },\n        info\n      );\n    }\n    // 4. If its not, create a fresh CartItem for that user!\n    return ctx.db.mutation.createCartItem(\n      {\n        data: {\n          user: {\n            connect: { id: userId },\n          },\n          item: {\n            connect: { id: args.id },\n          },\n        },\n      },\n      info\n    );\n  },\n  async removeFromCart(parent, args, ctx, info) {\n    // 1. Find the cart item\n    const cartItem = await ctx.db.query.cartItem(\n      {\n        where: {\n          id: args.id,\n        },\n      },\n      `{ id, user { id }}`\n    );\n    // 1.5 Make sure we found an item\n    if (!cartItem) throw new Error('No CartItem Found!');\n    // 2. Make sure they own that cart item\n    if (cartItem.user.id !== ctx.request.userId) {\n      throw new Error('Cheatin huhhhh');\n    }\n    // 3. Delete that cart item\n    return ctx.db.mutation.deleteCartItem(\n      {\n        where: { id: args.id },\n      },\n      info\n    );\n  },\n  async createOrder(parent, args, ctx, info) {\n    // 1. Query the current user and make sure they are signed in\n    const { userId } = ctx.request;\n    if (!userId) throw new Error('You must be signed in to complete this order.');\n    const user = await ctx.db.query.user(\n      { where: { id: userId } },\n      `{\n      id\n      name\n      email\n      cart {\n        id\n        quantity\n        item { title price id description image largeImage }\n      }}`\n    );\n    // 2. recalculate the total for the price\n    const amount = user.cart.reduce(\n      (tally, cartItem) => tally + cartItem.item.price * cartItem.quantity,\n      0\n    );\n    console.log(`Going to charge for a total of ${amount}`);\n    // 3. Create the stripe charge (turn token into $$$)\n    const charge = await stripe.charges.create({\n      amount,\n      currency: 'USD',\n      source: args.token,\n    });\n    // 4. Convert the CartItems to OrderItems\n    const orderItems = user.cart.map(cartItem => {\n      const orderItem = {\n        ...cartItem.item,\n        quantity: cartItem.quantity,\n        user: { connect: { id: userId } },\n      };\n      delete orderItem.id;\n      return orderItem;\n    });\n\n    // 5. create the Order\n    const order = await ctx.db.mutation.createOrder({\n      data: {\n        total: charge.amount,\n        charge: charge.id,\n        items: { create: orderItems },\n        user: { connect: { id: userId } },\n      },\n    });\n    // 6. Clean up - clear the users cart, delete cartItems\n    const cartItemIds = user.cart.map(cartItem => cartItem.id);\n    await ctx.db.mutation.deleteManyCartItems({\n      where: {\n        id_in: cartItemIds,\n      },\n    });\n    // 7. Return the Order to the client\n    return order;\n  },\n};\n\nmodule.exports = Mutations;\n"],"file":"Mutation.js"}