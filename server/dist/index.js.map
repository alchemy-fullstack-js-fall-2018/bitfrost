{"version":3,"sources":["../src/index.js"],"names":["cookieParser","require","jwt","config","createServer","db","server","express","use","req","res","next","token","cookies","verify","process","env","APP_SECRET","userId","query","user","where","id","start","cors","credentials","origin","FRONTEND_URL","deets","console","log","port"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB;;AACA,IAAMC,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAMK,MAAM,GAAGF,YAAY,EAA3B;AAEAE,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBR,YAAY,EAA/B,E,CAEA;;AACAM,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MAC7BC,KAD6B,GACnBH,GAAG,CAACI,OADe,CAC7BD,KAD6B;;AAErC,MAAIA,KAAJ,EAAW;AAAA,sBACUV,GAAG,CAACY,MAAJ,CAAWF,KAAX,EAAkBG,OAAO,CAACC,GAAR,CAAYC,UAA9B,CADV;AAAA,QACDC,MADC,eACDA,MADC,EAET;;;AACAT,IAAAA,GAAG,CAACS,MAAJ,GAAaA,MAAb;AACD;;AACDP,EAAAA,IAAI;AACL,CARD,E,CAUA;;AAEAL,MAAM,CAACC,OAAP,CAAeC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEZF,GAAG,CAACS,MAFQ;AAAA;AAAA;AAAA;;AAAA,6CAEOP,IAAI,EAFX;;AAAA;AAAA;AAAA,mBAGEN,EAAE,CAACc,KAAH,CAASC,IAAT,CACjB;AAAEC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,EAAE,EAAEb,GAAG,CAACS;AAAV;AAAT,aADiB,EAEjB,kCAFiB,CAHF;;AAAA;AAGXE,YAAAA,IAHW;AAOjBX,YAAAA,GAAG,CAACW,IAAJ,GAAWA,IAAX;AACAT,YAAAA,IAAI;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;AAWAL,MAAM,CAACiB,KAAP,CACE;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,WAAW,EAAE,IADT;AAEJC,IAAAA,MAAM,EAAEX,OAAO,CAACC,GAAR,CAAYW;AAFhB;AADR,CADF,EAOE,UAAAC,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,0DAA8DF,KAAK,CAACG,IAApE;AACD,CATH","sourcesContent":["const cookieParser = require('cookie-parser');\nconst jwt = require('jsonwebtoken');\n\nrequire('dotenv').config();\nconst createServer = require('./createServer');\nconst db = require('./db');\n\nconst server = createServer();\n\nserver.express.use(cookieParser());\n\n// decode the JWT so we can get the user Id on each request\nserver.express.use((req, res, next) => {\n  const { token } = req.cookies;\n  if (token) {\n    const { userId } = jwt.verify(token, process.env.APP_SECRET);\n    // put the userId onto the req for future requests to access\n    req.userId = userId;\n  }\n  next();\n});\n\n// 2. Create a middleware that populates the user on each request\n\nserver.express.use(async (req, res, next) => {\n  // if they aren't logged in, skip this\n  if (!req.userId) return next();\n  const user = await db.query.user(\n    { where: { id: req.userId } },\n    '{ id, permissions, email, name }'\n  );\n  req.user = user;\n  next();\n});\n\nserver.start(\n  {\n    cors: {\n      credentials: true,\n      origin: process.env.FRONTEND_URL,\n    },\n  },\n  deets => {\n    console.log(`Server is now running on port http://localhost:${deets.port}`);\n  }\n);\n"],"file":"index.js"}