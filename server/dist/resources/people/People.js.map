{"version":3,"sources":["../../../src/resources/people/People.js"],"names":["mongoose","require","GraphQLObjectType","GraphQLID","GraphQLNonNull","GraphQLInt","GraphQLString","PersonType","name","description","fields","_id","type","email","phone","address","street","city","state","zip","formatted","resolve","obj","personSchema","Schema","String","required","enum","Number","Person","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\nconst {\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLString\n} = require('graphql');\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'A person',\n  fields: () => ({\n    _id: { type: new GraphQLNonNull(GraphQLID) },\n    name: { type: new GraphQLNonNull(GraphQLString) },\n    email: { type: new GraphQLNonNull(GraphQLString) },\n    phone: { type: new GraphQLNonNull(GraphQLString) },\n    address: {\n      street: { type: GraphQLString },\n      city: { type: GraphQLString },\n      state: { type: GraphQLString },\n      zip: { type: new GraphQLNonNull(GraphQLInt) },\n      formatted: {\n        type: GraphQLString,\n        resolve(obj) {\n          return obj.street + obj.city + obj.state + obj.zip\n        }\n      }\n    },\n  })\n});\n\nconst personSchema = mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  phone: {\n    type: String,\n    required: true\n  },\n  address: {\n    street: String,\n    city: String,\n    state: {\n        type: String,\n        enum: ['AL', 'AK', 'AS', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FM', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MH', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PW', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY']\n    },\n    zip: {\n        type: Number,\n        required: [true, 'ZIP code is required'],\n    },\n  }\n});\n\n// personSchema.methods.graphql = function() {\n//   // do some graphql manipulation\n// }\n\nconst Person = mongoose.model('Person', personSchema);\n\nmodule.exports = {\n  Person,\n  PersonType\n};\n"],"file":"People.js"}
