{"version":3,"sources":["../../src/resources/index.js"],"names":["require","User","UserType","prepareMongooseDoc","GraphQLNonNull","GraphQLObjectType","GraphQLInputObjectType","GraphQLList","GraphQLSchema","GraphQLString","GraphQLID","prepareObj","obj","graphql","prepare","Array","isArray","map","Queries","name","description","fields","user","type","args","id","resolve","_","findById","then","people","find","Mutations","createUser","email","phone","create","Schema","query","mutation","module","exports"],"mappings":";;eAA2BA,OAAO,CAAC,SAAD,C;IAA1BC,I,YAAAA,I;IAAMC,Q,YAAAA,Q;;gBACiBF,OAAO,CAAC,gBAAD,C;IAA9BG,kB,aAAAA,kB;;gBASJH,OAAO,CAAC,SAAD,C;IAPTI,c,aAAAA,c;IACAC,iB,aAAAA,iB;IACAC,sB,aAAAA,sB;IACAC,W,aAAAA,W;IACAC,a,aAAAA,a;IACAC,a,aAAAA,a;IACAC,S,aAAAA,S;;AAGF,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,GAAG,EAAI;AACxB,MAAI,OAAOA,GAAG,CAACC,OAAX,KAAuB,UAA3B,EAAuC,OAAOD,GAAG,CAACC,OAAJ,EAAP;AAEvC,SAAOV,kBAAkB,CAACS,GAAD,CAAzB;AACD,CAJD;;AAMA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAAF,GAAG,EAAI;AACrB,MAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB,OAAOA,GAAG,CAACK,GAAJ,CAAQN,UAAR,CAAP;AACxB,SAAOA,UAAU,CAACC,GAAD,CAAjB;AACD,CAHD;;AAKA,IAAMM,OAAO,GAAG,IAAIb,iBAAJ,CAAsB;AACpCc,EAAAA,IAAI,EAAE,aAD8B;AAEpCC,EAAAA,WAAW,EAAE,iBAFuB;AAGpCC,EAAAA,MAAM,EAAE;AAAA,WAAO;AACbC,MAAAA,IAAI,EAAE;AACJF,QAAAA,WAAW,EAAE,kBADT;AAEJG,QAAAA,IAAI,EAAErB,QAFF;AAGJsB,QAAAA,IAAI,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAEF,YAAAA,IAAI,EAAEb;AAAR;AAAN,SAHF;AAIJgB,QAAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,cAAMF,EAAN,QAAMA,EAAN;AAAA,iBAAexB,IAAI,CAAC2B,QAAL,CAAcH,EAAd,EAAkBI,IAAlB,CAAuBf,OAAvB,CAAf;AAAA;AAJL,OADO;AAObgB,MAAAA,MAAM,EAAE;AACNV,QAAAA,WAAW,EAAE,4BADP;AAENG,QAAAA,IAAI,EAAE,IAAIhB,WAAJ,CAAgBL,QAAhB,CAFA;AAGNwB,QAAAA,OAAO,EAAE;AAAA,iBAAMzB,IAAI,CAAC8B,IAAL,GAAYF,IAAZ,CAAiBf,OAAjB,CAAN;AAAA;AAHH;AAPK,KAAP;AAAA;AAH4B,CAAtB,CAAhB;AAkBA,IAAMkB,SAAS,GAAG,IAAI3B,iBAAJ,CAAsB;AACtCc,EAAAA,IAAI,EAAE,WADgC;AAEtCC,EAAAA,WAAW,EAAE,gBAFyB;AAGtCC,EAAAA,MAAM,EAAE;AAAA,WAAO;AACbY,MAAAA,UAAU,EAAE;AACVb,QAAAA,WAAW,EAAE,mBADH;AAEVG,QAAAA,IAAI,EAAErB,QAFI;AAGVsB,QAAAA,IAAI,EAAE;AACJL,UAAAA,IAAI,EAAE;AAAEI,YAAAA,IAAI,EAAE,IAAInB,cAAJ,CAAmBK,aAAnB;AAAR,WADF;AAEJyB,UAAAA,KAAK,EAAE;AAAEX,YAAAA,IAAI,EAAEd;AAAR,WAFH;AAGJ0B,UAAAA,KAAK,EAAE;AAAEZ,YAAAA,IAAI,EAAEd;AAAR;AAHH,SAHI;AAQViB,QAAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,cAAMR,IAAN,SAAMA,IAAN;AAAA,cAAYe,KAAZ,SAAYA,KAAZ;AAAA,cAAmBC,KAAnB,SAAmBA,KAAnB;AAAA,iBAA+BlC,IAAI,CAACmC,MAAL,CAAY;AAAEjB,YAAAA,IAAI,EAAJA,IAAF;AAAQe,YAAAA,KAAK,EAALA,KAAR;AAAeC,YAAAA,KAAK,EAALA;AAAf,WAAZ,EAAoCN,IAApC,CAAyCf,OAAzC,CAA/B;AAAA;AARC;AADC,KAAP;AAAA;AAH8B,CAAtB,CAAlB;AAiBA,IAAMuB,MAAM,GAAG,IAAI7B,aAAJ,CAAkB;AAC/B8B,EAAAA,KAAK,EAAEpB,OADwB;AAE/BqB,EAAAA,QAAQ,EAAEP;AAFqB,CAAlB,CAAf;AAKAQ,MAAM,CAACC,OAAP,GAAiBJ,MAAjB","sourcesContent":["const { User, UserType } = require('./users');\nconst { prepareMongooseDoc } = require('../lib/graphql');\nconst {\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLID\n} = require('graphql');\n\nconst prepareObj = obj => {\n  if (typeof obj.graphql === 'function') return obj.graphql();\n\n  return prepareMongooseDoc(obj);\n}\n\nconst prepare = obj => {\n  if (Array.isArray(obj)) return obj.map(prepareObj);\n  return prepareObj(obj);\n};\n\nconst Queries = new GraphQLObjectType({\n  name: 'RootQueries',\n  description: 'My root queries',\n  fields: () => ({\n    user: {\n      description: 'retrieves a user',\n      type: UserType,\n      args: { id: { type: GraphQLID } },\n      resolve: (_, { id }) => User.findById(id).then(prepare)\n    },\n    people: {\n      description: 'retrieves a list of people',\n      type: new GraphQLList(UserType),\n      resolve: () => User.find().then(prepare)\n    }\n  })\n});\n\nconst Mutations = new GraphQLObjectType({\n  name: 'Mutations',\n  description: 'Root mutations',\n  fields: () => ({\n    createUser: {\n      description: 'Create a new user',\n      type: UserType,\n      args: {\n        name: { type: new GraphQLNonNull(GraphQLString) },\n        email: { type: GraphQLString },\n        phone: { type: GraphQLString }\n      },\n      resolve: (_, { name, email, phone }) => User.create({ name, email, phone }).then(prepare)\n    }\n  })\n});\n\nconst Schema = new GraphQLSchema({\n  query: Queries,\n  mutation: Mutations\n});\n\nmodule.exports = Schema;\n"],"file":"index.js"}