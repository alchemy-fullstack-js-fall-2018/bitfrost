{"version":3,"sources":["../../src/resources/schema.js"],"names":["require","Person","PersonType","prepareMongooseDoc","GraphQLNonNull","GraphQLObjectType","GraphQLInputObjectType","GraphQLList","GraphQLSchema","GraphQLString","GraphQLID","prepareObj","obj","graphql","prepare","Array","isArray","map","Queries","name","description","fields","person","type","args","id","resolve","_","findById","then","people","find","Mutations","createPerson","birthday","status","create","Schema","query","mutation","module","exports"],"mappings":"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","sourcesContent":["const { Person, PersonType } = require('./people/People');\nconst { prepareMongooseDoc } = require('../lib/graphql');\nconst {\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLID\n} = require('graphql');\n\nconst prepareObj = obj => {\n  if (typeof obj.graphql === 'function') return obj.graphql();\n\n  return prepareMongooseDoc(obj);\n}\n\nconst prepare = obj => {\n  if (Array.isArray(obj)) return obj.map(prepareObj);\n  return prepareObj(obj);\n};\n\nconst Queries = new GraphQLObjectType({\n  name: 'RootQueries',\n  description: 'My root queries',\n  fields: () => ({\n    person: {\n      description: 'retrieves a person',\n      type: PersonType,\n      args: { id: { type: GraphQLID } },\n      resolve: (_, { id }) => Person.findById(id).then(prepare)\n    },\n    people: {\n      description: 'retrieves a list of people',\n      type: new GraphQLList(PersonType),\n      resolve: () => Person.find().then(prepare)\n    }\n  })\n});\n\nconst Mutations = new GraphQLObjectType({\n  name: 'Mutations',\n  description: 'Root mutations',\n  fields: () => ({\n    createPerson: {\n      description: 'Create a new person',\n      type: PersonType,\n      args: {\n        name: { type: new GraphQLNonNull(GraphQLString) },\n        birthday: { type: GraphQLString },\n        status: { type: GraphQLString }\n      },\n      resolve: (_, { name, birthday, status }) => Person.create({ name, birthday, status }).then(prepare)\n    }\n  })\n});\n\nconst Schema = new GraphQLSchema({\n  query: Queries,\n  mutation: Mutations\n});\n\nmodule.exports = Schema;\n"],"file":"schema.js"}
