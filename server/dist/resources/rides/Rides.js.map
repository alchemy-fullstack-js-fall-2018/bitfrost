{"version":3,"sources":["../../../src/resources/rides/Rides.js"],"names":["mongoose","require","GraphQLObjectType","GraphQLNonNull","GraphQLString","GraphQLInt","RidesType","name","description","fields","driver","type","riders","comments","origin","destination","street","city","state","zip","formatted","resolve","obj","departure","arrival","currentLocation","departed","ridesSchema","Schema","userID","String","required","seats","Number","enum","Date","Rides","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\nconst {\n  GraphQLObjectType,\n  // GraphQLID,\n  GraphQLNonNull,\n  GraphQLString,\n  GraphQLInt,\n} = require('graphql');\n\nconst RidesType = new GraphQLObjectType({\n  name: 'Rides',\n  description: 'Rides info',\n  fields: () => ({\n    driver: { type: new GraphQLNonNull(GraphQLString) },\n    riders: { type: GraphQLString },\n    comments: { type: GraphQLString },\n    origin: { type: new GraphQLNonNull(GraphQLString) },\n    destination: {\n      street: { type: GraphQLString },\n      city: { type: GraphQLString },\n      state: { type: GraphQLString },\n      zip: { type: new GraphQLNonNull(GraphQLInt) },\n      formatted: {\n        type: GraphQLString,\n        resolve(obj) {\n          return obj.street + obj.city + obj.state + obj.zip\n        }\n      }\n    },\n    departure: { type: new GraphQLNonNull(GraphQLInt) },\n    arrival: { type: new GraphQLNonNull(GraphQLInt) },\n    currentLocation: { type: new GraphQLNonNull(GraphQLString) },\n    departed: { type: new GraphQLNonNull(GraphQLString) }\n  })\n});\n\nconst ridesSchema = mongoose.Schema({\n  driver: {\n    userID: String,\n    required: true,\n    seats: {\n      type: Number,\n      required: true\n    }\n  },\n  riders: {\n    userID: String,\n  },\n  comments: {\n    type: String\n  },\n  origin: {\n    type: String,\n    required: [true, 'Please enter coordinates' ]\n  },\n  destination: {\n    street: String,\n    city: String,\n    state: {\n        type: String,\n        enum: ['AL', 'AK', 'AS', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FM', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MH', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PW', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY']\n    },\n    zip: {\n        type: Number,\n        required: [true, 'ZIP code is required'],\n    },\n  },\n  departure: {\n    type: Date,\n    required: true\n  },\n  arrival: {\n    type: Date,\n    required: true\n  },\n  currentLocation: {\n    type: String,\n    required: true\n  },\n  departed: {\n    type: String,\n    required: true\n  }\n});\n\n// ridesSchema.methods.graphql = function() {\n//   // do some graphql manipulation\n// }\n\nconst Rides = mongoose.model('Rides', ridesSchema);\n\nmodule.exports = {\n  Rides,\n  RidesType\n}\n"],"file":"Rides.js"}
